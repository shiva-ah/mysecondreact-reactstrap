{"version":3,"sources":["logo.svg","serviceWorker.js","page1.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Page1","Example","path","component","Button","color","id","style","marginBottom","UncontrolledCollapse","toggler","Card","CardBody","src","ReactDOM","render","document","getElementById"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,iJCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBCPSC,MARf,WACE,OACE,sC,gCCmBEC,EAAU,WAEd,OACA,oCACA,kBAAC,IAAD,KACM,kBAAC,IAAD,CAAOC,KAAK,SAAUC,UAAWH,KAGvC,6BACE,kBAACI,EAAA,EAAD,CAAQC,MAAM,UAAUC,GAAG,UAAUC,MAAO,CAAEC,aAAc,SAA5D,UAGA,kBAACC,EAAA,EAAD,CAAsBC,QAAQ,YAC5B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,6NAIJ,yBAAKC,IAAK,gCAQdC,IAASC,OAAO,kBAAC,EAAD,MAAWC,SAASC,eAAe,W","file":"static/js/main.e2df846e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\n\nfunction Page1() {\n  return (\n    <div>\n pag1\n    </div>\n  );\n}\n\nexport default Page1;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport {} from 'reactstrap';\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport Page1 from './page1';\n\n/*class Header extends React.Component{\n  render(){\n    return(\n      <div className=\"row\">\n        <div className=\"col-sm-6\" style={{border:\"1px solid red\",boxSizing:\"border-box\"}}>one</div>\n        <div className=\"col-sm-6\" style={{border:\"1px solid red\",boxSizing:\"border-box\"}}><button className=\"btn btn-primary\">Click</button></div>\n        \n      </div>\n    )\n  }\n}*/\n\nimport { UncontrolledCollapse, Button, CardBody, Card } from 'reactstrap';\n\nconst Example = () => {\n\n\t\treturn(\n\t\t<>\n\t\t<BrowserRouter>\n        <Route path=\"/page1\"  component={Page1}/ >\n</BrowserRouter>\n\t\t\n  <div>\n    <Button color=\"primary\" id=\"toggler\" style={{ marginBottom: '1rem' }}>\n      Toggle\n    </Button>\n    <UncontrolledCollapse toggler=\"#toggler\">\n      <Card>\n        <CardBody>\n          Lorem ipsum dolor sit amet consectetur adipisicing elit. Nesciunt magni, voluptas debitis\n          similique porro a molestias consequuntur earum odio officiis natus, amet hic, iste sed\n          dignissimos esse fuga! Minus, alias.\n\t\t  <img src={\"../public/logo192.png\"}/>\n        </CardBody>\n      </Card>\n    </UncontrolledCollapse>\n  </div>\n  </>\n  )\n};\nReactDOM.render(<Example/>,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}